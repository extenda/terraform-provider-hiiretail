// Code generated by terraform-plugin-framework-generator DO NOT EDIT.
// Enhanced with OAuth2 authentication capabilities

package provider_hiiretail_iam

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func HiiretailIamProviderSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description: "Terraform provider for HiiRetail IAM API with OAuth2 client credentials authentication",
		Attributes: map[string]schema.Attribute{
			// Core Authentication Configuration
			"tenant_id": schema.StringAttribute{
				Description: "Tenant ID to use for all IAM API requests. This identifies your organization in the HiiRetail IAM system.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 64),
					stringvalidator.RegexMatches(
						regexp.MustCompile(`^[a-zA-Z0-9][a-zA-Z0-9\-]{1,62}[a-zA-Z0-9]$`),
						"Tenant ID must be 3-64 characters, alphanumeric with hyphens, starting and ending with alphanumeric",
					),
				},
			},
			"client_id": schema.StringAttribute{
				Description: "OAuth2 client ID for IAM API authentication. Obtain this from your OAuth2 provider configuration.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(8, 128),
					stringvalidator.RegexMatches(
						regexp.MustCompile(`^[a-zA-Z0-9][a-zA-Z0-9\-_]{6,126}[a-zA-Z0-9]$`),
						"Client ID must be 8-128 characters, alphanumeric with hyphens or underscores",
					),
				},
			},
			"client_secret": schema.StringAttribute{
				Description: "OAuth2 client secret for IAM API authentication. Keep this secure and rotate regularly.",
				Required:    true,
				Sensitive:   true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(8, 256),
				},
			},

			// URL Configuration (Discovery vs Explicit)
			"base_url": schema.StringAttribute{
				Description: "Base URL of the IAM API for OAuth2 discovery. If provided, OAuth2 endpoints will be discovered automatically. Alternative to explicit token_url.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
					stringvalidator.RegexMatches(
						regexp.MustCompile(`^https://[a-zA-Z0-9.-]+(/.*)?$`),
						"Base URL must use HTTPS scheme and include a valid hostname",
					),
				},
			},
			"token_url": schema.StringAttribute{
				Description: "Explicit OAuth2 token endpoint URL. Use this if you want to skip discovery and specify the token endpoint directly. Alternative to base_url.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
					stringvalidator.RegexMatches(
						regexp.MustCompile(`^https://[a-zA-Z0-9.-]+/.*$`),
						"Token URL must use HTTPS scheme and include a valid hostname and path",
					),
				},
			},

			// OAuth2 Scopes Configuration
			"scopes": schema.ListAttribute{
				Description:         "OAuth2 scopes to request for IAM API access. If not specified, default scopes (iam:read, iam:write) will be used.",
				Optional:            true,
				ElementType:         types.StringType,
				MarkdownDescription: "OAuth2 scopes control the level of access granted. Available scopes: `iam:read`, `iam:write`, `iam:admin`, `roles:read`, `roles:write`, `groups:read`, `groups:write`, `bindings:read`, `bindings:write`",
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
					listvalidator.ValueStringsAre(
						stringvalidator.OneOf(
							"iam:read", "iam:write", "iam:admin",
							"roles:read", "roles:write",
							"groups:read", "groups:write",
							"bindings:read", "bindings:write",
						),
					),
				},
			},

			// Timeout and Retry Configuration
			"timeout_seconds": schema.Int64Attribute{
				Description: "Timeout in seconds for OAuth2 authentication requests (5-300). Default is 30 seconds.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(5, 300),
				},
			},
			"max_retries": schema.Int64Attribute{
				Description: "Maximum number of retry attempts for failed OAuth2 requests (0-10). Default is 3.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(0, 10),
				},
			},

			// Advanced Configuration
			"disable_discovery": schema.BoolAttribute{
				Description: "Disable OAuth2 endpoint discovery and use explicit URLs only. Set to true if you want to bypass discovery and use token_url directly.",
				Optional:    true,
			},

			// Custom Headers
			"custom_headers": schema.MapAttribute{
				Description: "Custom HTTP headers to include in all IAM API requests. Useful for proxy authentication or additional metadata.",
				Optional:    true,
				ElementType: types.StringType,
			},
		},

		// Schema-level validation for cross-field dependencies
		Blocks: map[string]schema.Block{},
	}
}

// HiiretailIamModel represents the provider configuration data model
type HiiretailIamModel struct {
	// Core Authentication
	TenantId     types.String `tfsdk:"tenant_id"`
	ClientId     types.String `tfsdk:"client_id"`
	ClientSecret types.String `tfsdk:"client_secret"`

	// URL Configuration
	BaseUrl  types.String `tfsdk:"base_url"`
	TokenUrl types.String `tfsdk:"token_url"`

	// OAuth2 Configuration
	Scopes           types.List  `tfsdk:"scopes"`
	TimeoutSeconds   types.Int64 `tfsdk:"timeout_seconds"`
	MaxRetries       types.Int64 `tfsdk:"max_retries"`
	DisableDiscovery types.Bool  `tfsdk:"disable_discovery"`

	// Advanced Configuration
	CustomHeaders types.Map `tfsdk:"custom_headers"`
}
