#!/bin/bash
# Pre-commit hook for OAuth2 credential exposure detection
# This hook runs security checks before each commit to prevent credential leaks

set -e

echo "üîí Running OAuth2 security pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check for potential credential exposure
check_credentials() {
    echo "  üìã Checking for hardcoded credentials..."
    
    # Patterns to detect OAuth2 credentials
    local credential_patterns=(
        "client_secret[[:space:]]*[:=][[:space:]]*['\"][^'\"]{8,}['\"]"
        "access_token[[:space:]]*[:=][[:space:]]*['\"][^'\"]{20,}['\"]"
        "bearer[[:space:]]+[A-Za-z0-9+/]{20,}={0,2}"
        "authorization:[[:space:]]*bearer[[:space:]]+[A-Za-z0-9+/]{20,}"
        "token[[:space:]]*[:=][[:space:]]*['\"]eyJ[A-Za-z0-9+/]+"
    )
    
    local violations=0
    local staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(go|tf|tfvars|yaml|yml|json)$' || true)
    
    if [[ -z "$staged_files" ]]; then
        echo -e "    ${GREEN}‚úÖ No relevant files to check${NC}"
        return 0
    fi
    
    for file in $staged_files; do
        if [[ -f "$file" ]]; then
            for pattern in "${credential_patterns[@]}"; do
                local matches=$(git diff --cached "$file" | grep -E "^\+" | grep -iE "$pattern" || true)
                if [[ -n "$matches" ]]; then
                    echo -e "    ${RED}‚ùå Potential credential found in $file:${NC}"
                    echo "$matches" | sed 's/^/      /'
                    violations=$((violations + 1))
                fi
            done
        fi
    done
    
    if [[ $violations -gt 0 ]]; then
        echo -e "  ${RED}‚ùå Found $violations potential credential exposure(s)${NC}"
        return 1
    else
        echo -e "    ${GREEN}‚úÖ No credential exposures detected${NC}"
        return 0
    fi
}

# Function to check for proper logging practices
check_logging() {
    echo "  üìù Checking for secure logging practices..."
    
    local violations=0
    local staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.go$' || true)
    
    if [[ -z "$staged_files" ]]; then
        echo -e "    ${GREEN}‚úÖ No Go files to check${NC}"
        return 0
    fi
    
    # Patterns that indicate potential credential logging
    local unsafe_logging_patterns=(
        'log\.[^(]*\([^)]*client_secret'
        'log\.[^(]*\([^)]*access_token'
        'log\.[^(]*\([^)]*bearer'
        'fmt\.Print[^(]*\([^)]*client_secret'
        'fmt\.Print[^(]*\([^)]*access_token'
        'fmt\.Print[^(]*\([^)]*bearer'
    )
    
    for file in $staged_files; do
        if [[ -f "$file" ]]; then
            for pattern in "${unsafe_logging_patterns[@]}"; do
                local matches=$(git diff --cached "$file" | grep -E "^\+" | grep -iE "$pattern" || true)
                if [[ -n "$matches" ]]; then
                    echo -e "    ${RED}‚ùå Potential credential logging in $file:${NC}"
                    echo "$matches" | sed 's/^/      /'
                    violations=$((violations + 1))
                fi
            done
        fi
    done
    
    if [[ $violations -gt 0 ]]; then
        echo -e "  ${RED}‚ùå Found $violations potential credential logging issue(s)${NC}"
        return 1
    else
        echo -e "    ${GREEN}‚úÖ No credential logging issues detected${NC}"
        return 0
    fi
}

# Function to run security linting if available
check_security_linting() {
    echo "  üîç Running security linting..."
    
    if command -v golangci-lint >/dev/null 2>&1; then
        # Only run gosec for security-focused checks
        if golangci-lint run --enable gosec --disable-all --new-from-rev HEAD~1 2>/dev/null; then
            echo -e "    ${GREEN}‚úÖ Security linting passed${NC}"
            return 0
        else
            echo -e "    ${RED}‚ùå Security linting failed${NC}"
            return 1
        fi
    else
        echo -e "    ${YELLOW}‚ö†Ô∏è  golangci-lint not available, skipping security linting${NC}"
        return 0
    fi
}

# Main execution
main() {
    local exit_code=0
    
    # Run all security checks
    if ! check_credentials; then
        exit_code=1
    fi
    
    if ! check_logging; then
        exit_code=1
    fi
    
    if ! check_security_linting; then
        exit_code=1
    fi
    
    if [[ $exit_code -eq 0 ]]; then
        echo -e "${GREEN}üîí All OAuth2 security checks passed!${NC}"
    else
        echo -e "${RED}üö® OAuth2 security checks failed. Please fix the issues above before committing.${NC}"
        echo -e "${YELLOW}üí° Tips:${NC}"
        echo "   - Use environment variables for credentials instead of hardcoding"
        echo "   - Use types.String with Sensitive: true in Terraform schemas"
        echo "   - Avoid logging credential values (use redacted logging)"
        echo "   - Run 'make security-audit' for detailed security analysis"
    fi
    
    exit $exit_code
}

main "$@"