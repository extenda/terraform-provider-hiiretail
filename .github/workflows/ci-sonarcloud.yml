name: CI-CD with SonarCloud

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Install dependencies
        run: go mod tidy
      - name: Run tests
        env:
          HIIRETAIL_CLIENT_ID: dummy-client-id
          HIIRETAIL_CLIENT_SECRET: dummy-client-secret
          HIIRETAIL_TENANT_ID: dummy-tenant-id
        run: go test -v ./...
      - name: Generate coverage report
        env:
          HIIRETAIL_CLIENT_ID: dummy-client-id
          HIIRETAIL_CLIENT_SECRET: dummy-client-secret
          HIIRETAIL_TENANT_ID: dummy-tenant-id
        run: go test -coverprofile=coverage.out ./...
      - name: Check coverage threshold for service.go
        env:
          HIIRETAIL_CLIENT_ID: dummy-client-id
          HIIRETAIL_CLIENT_SECRET: dummy-client-secret
          HIIRETAIL_TENANT_ID: dummy-tenant-id
        run: |
          # Run tests for the iam package and generate coverage
          go test -coverprofile=coverage.out ./internal/provider/iam

          # Compute per-file coverage robustly from the coverage profile.
          # coverage.out format (per-line):
          #   <filename>:<start>,<end> <num_statements> <count>
          # We'll sum the num_statements for each range, and count them as covered
          # when count>0. This gives an accurate per-file coverage percentage.
          TARGET="internal/provider/iam/service.go"
          COVERAGE=$(awk -v f="$TARGET" '
            NR>1 {
              # $1 = filename:pos, $2 = num_statements, $3 = count
              split($1, parts, ":"); fname = parts[1]; stmts = $2; cnt = $3;
              files[fname]["stmts"] += stmts;
              if (cnt > 0) files[fname]["cov"] += stmts;
            }
            END {
              if (files[f]["stmts"] == 0) {
                # no data for file
                exit 0
              }
              pct = files[f]["cov"] / files[f]["stmts"] * 100;
              printf("%.1f", pct);
            }' coverage.out)

          if ! echo "$COVERAGE" | grep -E '^[0-9]+(\.[0-9]+)?$' >/dev/null; then
            echo "ERROR: Could not compute coverage for $TARGET (coverage.out missing or malformed)"
            exit 1
          fi

          THRESHOLD=90.0
          cmp=$(echo "$COVERAGE < $THRESHOLD" | bc -l)
          if [ "$cmp" -eq 1 ]; then
            echo "ERROR: Code coverage for $TARGET is below ${THRESHOLD}% ($COVERAGE%)"
            exit 1
          else
            echo "Code coverage for $TARGET is $COVERAGE% (threshold: ${THRESHOLD}%)"
          fi
      - name: Fetch sonarcloud token
        uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            SONAR_TOKEN: sonarcloud-token
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=extenda
            -Dsonar.projectKey=extenda_terraform-provider-hiiretail
            -Dsonar.go.coverage.reportPaths=coverage.out
